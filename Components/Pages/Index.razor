@page "/"
@attribute [StreamRendering]
@using BlazorRazden.App.Data
@using BlazorRazden.App.Data.Http
@using BlazorRazden.App.Models
@using BlazorRazden.App.Properties
@inject IndexService indexService
@inject IHttpClientFactory _httpClientFactory

<PageTitle>Bitcoin and Index</PageTitle>

<p class="h2">Today's Bitcoin Price and Weekly Index</p>

<div class="d-grid gap-2">
    <div class="p-2 bg-light border">
        @if (bitCoinPrice is not null)
        {
            <p class="h5"> Bitcoin USD price : @String.Format("{0:C}", bitCoinPrice)</p>
        }
    </div>
</div>

<div class="rz-p-0 rz-p-md-12" mt-4>
    @if (index == null)
    {
        <p><em>Fetching Index data...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Trading Date</th>
                    <th>Index (All stocks)</th>
                </tr>
            </thead>
            <tbody>
                @if (index is not null)
                {
                    @foreach (var ixitem in index)
                    {
                        <tr>
                            <td>@ixitem.DateCreated.ToShortDateString()</td>
                            <td>@ixitem.Description</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>



<div class="rz-p-0 rz-p-md-12">
    <RadzenChart>
        <RadzenLineSeries Data="@index" CategoryProperty="IndexDate" Title="Daily Index" LineType="LineType.Solid" ValueProperty="IndexValue">
            <RadzenMarkers Visible="true" MarkerType="MarkerType.Triangle" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="20" />
    </RadzenChart>
</div>


@code {

    private IndexModel[]? index;
    private string bitCoinPrice = "";

    protected override async Task OnInitializedAsync()
    {
        // Simulate API call with delay
        await Task.Delay(1000);
        index = await indexService.GetIndexAsync(DateTime.Now);

        // Get Bitcoin USD price from CoinBase API using injected HTTP client
        var _httpClient = _httpClientFactory.CreateClient("HttpGenericClient");
        HttpGenericClient<CoinModel[]> client = new HttpGenericClient<CoinModel[]>(_httpClient);
        try
        {
            var coinarray = await client.GetAsync(Endpoints.CoinLoreBitcoinTicker, Endpoints.CoinLoreHost);
            if (coinarray is not null && coinarray is CoinModel[] && coinarray.Length > 0 )
            {
                var coin = coinarray[0];
                bitCoinPrice = coin.Price_usd ?? "No Ticker Price Avaiable Today";
                //Console.WriteLine($"Coin: {coin.Name} - {coin.Symbol} - {coin.Price_usd}");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message}");
        }
    }
}
